package autocisq.junit;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.stmt.CatchClause;

import autocisq.IssueFinder;
import autocisq.models.Issue;

public class IssueFinderTest {

	private String fileString = "";
	private File testFile;
	private List<String> lines = new ArrayList<>();
	private List<Issue> issues;
	private CompilationUnit compilationUnit;
	private CatchClause catchClause;
	private LinkedHashMap<String, String> layerMap;

	@Before
	public void setUp() throws Exception {
		this.testFile = new File("res/test/EntropyManualCalculator.java");

		this.lines = Files.readAllLines(this.testFile.toPath());

		String nl = System.lineSeparator();
		for (String line : this.lines) {
			this.fileString += line + nl;
		}

		this.compilationUnit = JavaParser.parse(this.testFile);
		Node tryStmt = this.compilationUnit.getTypes().get(0).getMembers().get(2).getChildrenNodes().get(3)
				.getChildrenNodes().get(4);
		this.catchClause = (CatchClause) tryStmt.getChildrenNodes().get(2);
		this.issues = IssueFinder.analyzeNode(tryStmt, null, this.fileString);

		String layer1 = "Layer 1";
		String layer2 = "Layer 2";
		String layer3 = "Layer 3";

		this.layerMap = new LinkedHashMap<>();
		this.layerMap.put("no.uib.lca092.rtms.gui.GUI", layer1);
		this.layerMap.put("no.uib.lca092.rtms.gui.GUIUtils", layer1);
		this.layerMap.put("no.uib.lca092.rtms.gui.SettingsGUI", layer1);
		this.layerMap.put("no.uib.lca092.rtms.gui.ThemeManager", layer1);
		this.layerMap.put("no.uib.lca092.rtms.TsvToHtml", layer2);
		this.layerMap.put("no.uib.lca092.rtms.io.Parser", layer3);
	}

	@Test
	public void testColumnsToIndexes() {
		int startLine = 1;
		int endLine = this.lines.size();
		int startExpected = 0;
		int endExpected = this.fileString.length();
		int[] indexes = IssueFinder.columnsToIndexes(this.fileString, startLine, endLine, 1, 2);
		assertEquals(startExpected, indexes[0]);
		assertEquals(endExpected, indexes[1]);
	}

	@Test
	public void testAnalyzeNode() {
		List<Issue> expected = this.issues;
		List<Issue> actual = IssueFinder.analyzeNode(this.compilationUnit, expected, this.fileString);
		assertEquals(expected, actual);
	}

	@Test
	public void testCheckEmptyBlockStmt() {
		assertTrue(this.issues.size() == 3);
		assertEquals(33, this.issues.get(0).getBeginLine());
		assertEquals(36, this.issues.get(1).getBeginLine());
		assertEquals(38, this.issues.get(2).getBeginLine());
	}

	@Test
	public void findEmptyCatchClause() {
		boolean found = false;
		for (Issue issue : this.issues) {
			if (issue.getType().equals("Empty Catch Block")) {
				found = true;
			}
		}
		assertTrue(found);
	}

	@Test
	public void findAutoGeneratedCatchClause() {
		boolean found = false;
		for (Issue issue : this.issues) {
			if (issue.getType().equals("Auto Generated Catch Block")) {
				found = true;
			}
		}
		assertTrue(found);
	}

	@Test
	public void findEmptyFinallyBlock() {
		boolean found = false;
		for (Issue issue : this.issues) {
			if (issue.getType().equals("Empty Finally Block")) {
				found = true;
			}
		}
		assertTrue(found);
	}

	@Test
	public void placeMarkerCorrectly() {
		int beginLine = this.catchClause.getBeginLine();
		int endLine = this.catchClause.getEndLine();
		int startColumn = this.catchClause.getBeginColumn() - 14;
		int endColumn = this.catchClause.getEndColumn() - 14;
		int[] indexes = IssueFinder.columnsToIndexes(this.fileString, beginLine, endLine, startColumn, endColumn);
		Issue regexIssue = IssueFinder.analyzeRegex(this.fileString).get(0);
		int expectedBeginLine = regexIssue.getBeginLine();
		int expectedStartIndex = regexIssue.getStartIndex();
		int expectedEndIndex = regexIssue.getEndIndex();

		assertEquals("Begin line difference:" + Math.abs(expectedBeginLine - beginLine), expectedBeginLine, beginLine);
		assertEquals("Start index difference:" + Math.abs(expectedStartIndex - indexes[0]), expectedStartIndex,
				indexes[0]);
		assertEquals("End index difference:" + Math.abs(expectedEndIndex - indexes[1]), expectedEndIndex, indexes[1]);
	}

	@Test
	public void findClassOfMethodCall() {
		IssueFinder.analyzeNode(this.compilationUnit, this.issues, this.fileString);
	}
}
